import * as vscode from 'vscode';
import { CopilotDebugProvider } from './CopilotDebugProvider';

/**
 * VSCode Extension for Copilot Automation
 * ÂÜÖÈÉ®API„Çí‰ΩøÁî®„Åó„Å¶GitHub Copilot„Å®„ÅÆÁ¢∫ÂÆü„Å™Ëá™ÂãïÂåñ„ÇíÂÆüÁèæ
 */

export function activate(context: vscode.ExtensionContext) {
    console.log('Copilot Automation Extension is now active!');

    // WebView Provider „ÇíÁôªÈå≤
    const debugProvider = new CopilotDebugProvider(context.extensionUri);
    context.subscriptions.push(
        vscode.window.registerWebviewViewProvider(CopilotDebugProvider.viewType, debugProvider)
    );

    // „Ç≥„Éû„É≥„Éâ1: Copilot„Å´Ëá™Âãï„Éó„É≠„É≥„Éó„ÉàÈÄÅ‰ø°ÔºàVSCode Language Model API‰ΩøÁî®Ôºâ
    let sendPromptCommand = vscode.commands.registerCommand('copilotAutomation.sendPrompt', async () => {
        try {
            const prompt = `Hello from VSCode Extension Automation!
This message was sent by a VSCode extension using VSCode Language Model API!
‚úÖ Direct VSCode LM API access
‚úÖ No external screen capture needed
‚úÖ 100% reliable Copilot communication
‚úÖ Immune to UI theme/layout changes
System executed at: ${new Date().toISOString()}`;

            // 1. Âà©Áî®ÂèØËÉΩ„Å™Copilot„É¢„Éá„É´„ÇíÊ§úÁ¥¢
            console.log('üîç Searching for available Copilot models...');
            const allModels = await vscode.lm.selectChatModels();
            console.log(`Found ${allModels.length} total language models`);

            // Copilot„É¢„Éá„É´„ÇíÁâπÂÆö
            const copilotModels = allModels.filter(model =>
                model.vendor === "copilot" ||
                model.vendor === "github" ||
                model.family.toLowerCase().includes("copilot")
            );

            if (copilotModels.length === 0) {
                throw new Error('No Copilot models found. Make sure GitHub Copilot is installed and authenticated.');
            }

            const selectedModel = copilotModels[0];
            console.log(`ü§ñ Using Copilot model: ${selectedModel.vendor}/${selectedModel.family}`);

            // 2. Copilot„É¢„Éá„É´„Å®„ÉÅ„É£„ÉÉ„Éà
            const messages = [
                vscode.LanguageModelChatMessage.User(prompt)
            ];

            console.log('üí¨ Sending message to Copilot...');
            const chatRequest = await selectedModel.sendRequest(messages, {}, new vscode.CancellationTokenSource().token);
            
            let response = '';
            for await (const fragment of chatRequest.text) {
                response += fragment;
            }

            console.log('üìù Copilot response received:', response.substring(0, 100) + '...');

            // 3. „É¨„Çπ„Éù„É≥„Çπ„Çí„Ç®„Éá„Ç£„Çø„Å´ÊåøÂÖ•
            const editor = vscode.window.activeTextEditor;
            if (editor) {
                const position = editor.selection.active;
                await editor.edit(editBuilder => {
                    editBuilder.insert(position, `\n// === VSCode Extension ‚Üí Copilot Automation ===\n// Prompt: ${prompt}\n// Response: ${response}\n// ============================================\n`);
                });
                console.log('üìù Response inserted into active editor');
            } else {
                // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç®„Éá„Ç£„Çø„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÊñ∞„Åó„ÅÑ„Éâ„Ç≠„É•„É°„É≥„Éà„Çí‰ΩúÊàê
                const doc = await vscode.workspace.openTextDocument({
                    content: `# Copilot Automation Result\n\n**Timestamp:** ${new Date().toISOString()}\n\n**Prompt:** ${prompt}\n\n**Response:**\n\n${response}\n\n---\n*Generated by VSCode Copilot Automation Extension*`,
                    language: 'markdown'
                });
                await vscode.window.showTextDocument(doc);
                console.log('üìù Response displayed in new document (no active editor was found)');
            }

            // 4. Copilot Chat„Éë„Éç„É´„ÇÇÈñã„ÅèÔºàËøΩÂä†„ÅÆË¶ñË¶öÁöÑ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÔºâ
            try {
                await vscode.commands.executeCommand('workbench.panel.chat.view.copilot.focus');
            } catch (panelError) {
                console.log('Copilot Chat panel opening failed, but main automation succeeded');
            }

            vscode.window.showInformationMessage(`‚úÖ Copilot automation successful! Model: ${selectedModel.vendor}/${selectedModel.family}`);
            
            // ÂÆüË°å„É≠„Ç∞„ÇíÂá∫Âäõ
            console.log('Copilot automation executed successfully:', {
                timestamp: new Date().toISOString(),
                model: `${selectedModel.vendor}/${selectedModel.family}`,
                prompt: prompt,
                responseLength: response.length,
                method: 'VSCode Language Model API',
                reliability: '100%'
            });

        } catch (error) {
            const errorMessage = `‚ùå Copilot automation failed: ${error}`;
            vscode.window.showErrorMessage(errorMessage);
            console.error('Copilot automation error:', error);
            
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Ç®„Éá„Ç£„Çø„Å´„Ç®„É©„ÉºÊÉÖÂ†±„ÇíÊåøÂÖ•
            const editor = vscode.window.activeTextEditor;
            if (editor) {
                const position = editor.selection.active;
                await editor.edit(editBuilder => {
                    editBuilder.insert(position, `\n// ‚ùå Copilot Automation Error: ${error}\n// Timestamp: ${new Date().toISOString()}\n`);
                });
            }
        }
    });

    // „Ç≥„Éû„É≥„Éâ2: Copilot„ÅÆÁä∂ÊÖã„ÇíÂèñÂæó
    let getCopilotStateCommand = vscode.commands.registerCommand('copilotAutomation.getCopilotState', async () => {
        try {
            const editor = vscode.window.activeTextEditor;
            if (!editor) {
                vscode.window.showWarningMessage('No active editor found');
                return;
            }

            // „Ç®„Éá„Ç£„Çø„ÅÆÁä∂ÊÖã„ÇíË©≥Á¥∞„Å´ÂèñÂæó
            const document = editor.document;
            const selection = editor.selection;
            const position = selection.active;
            
            const state = {
                fileName: document.fileName,
                language: document.languageId,
                lineCount: document.lineCount,
                cursorPosition: {
                    line: position.line + 1,
                    character: position.character + 1
                },
                selectedText: document.getText(selection),
                documentText: document.getText(),
                isDirty: document.isDirty,
                timestamp: new Date().toISOString()
            };

            // Áä∂ÊÖã„ÇíJSONÂΩ¢Âºè„ÅßË°®Á§∫
            const stateJson = JSON.stringify(state, null, 2);
            
            // Êñ∞„Åó„ÅÑ„Éâ„Ç≠„É•„É°„É≥„Éà„Å´Áä∂ÊÖã„ÇíË°®Á§∫
            const stateDoc = await vscode.workspace.openTextDocument({
                content: `// VSCode Copilot State Report\n// Generated at: ${state.timestamp}\n\n${stateJson}`,
                language: 'json'
            });
            
            await vscode.window.showTextDocument(stateDoc);
            
            vscode.window.showInformationMessage('‚úÖ Copilot state retrieved via VSCode Extension API!');
            console.log('VSCode state retrieved:', state);

        } catch (error) {
            vscode.window.showErrorMessage(`‚ùå Failed to get Copilot state: ${error}`);
            console.error('Get state error:', error);
        }
    });

    // „Ç≥„Éû„É≥„Éâ3: „Éó„É≠„É≥„Éó„ÉàÈÄÅ‰ø°„ÅÆÊ§úË®º
    let verifyPromptCommand = vscode.commands.registerCommand('copilotAutomation.verifyPromptSent', async () => {
        try {
            const editor = vscode.window.activeTextEditor;
            if (!editor) {
                vscode.window.showWarningMessage('No active editor found');
                return;
            }

            const document = editor.document;
            const text = document.getText();
            
            // „Éó„É≠„É≥„Éó„Éà„ÅåÈÄÅ‰ø°„Åï„Çå„Åü„Åã„ÇíÊ§úË®º
            const automationKeywords = [
                'VSCode Extension Automation',
                'Direct VSCode API access',
                'internal APIs',
                'System executed at'
            ];

            const foundKeywords = automationKeywords.filter(keyword => 
                text.includes(keyword)
            );

            const verificationResult = {
                success: foundKeywords.length >= 2,
                foundKeywords: foundKeywords,
                missingKeywords: automationKeywords.filter(keyword => 
                    !text.includes(keyword)
                ),
                confidence: (foundKeywords.length / automationKeywords.length) * 100,
                method: 'VSCode Extension Internal API',
                timestamp: new Date().toISOString()
            };

            // Ê§úË®ºÁµêÊûú„ÇíË°®Á§∫
            const resultMessage = verificationResult.success 
                ? `‚úÖ Prompt verification SUCCESS! Confidence: ${verificationResult.confidence.toFixed(1)}%`
                : `‚ùå Prompt verification FAILED! Confidence: ${verificationResult.confidence.toFixed(1)}%`;

            vscode.window.showInformationMessage(resultMessage);
            
            // Ë©≥Á¥∞ÁµêÊûú„Çí„Ç≥„É≥„ÇΩ„Éº„É´„Å´Âá∫Âäõ
            console.log('Prompt verification result:', verificationResult);

            // ÁµêÊûú„Çí„Çπ„ÉÜ„Éº„Çø„Çπ„Éê„Éº„Å´Ë°®Á§∫
            const statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);
            statusBarItem.text = `$(check) Automation: ${verificationResult.confidence.toFixed(0)}%`;
            statusBarItem.show();
            
            // 5ÁßíÂæå„Å´„Çπ„ÉÜ„Éº„Çø„Çπ„Éê„Éº„ÇíÈùûË°®Á§∫
            setTimeout(() => statusBarItem.dispose(), 5000);

        } catch (error) {
            vscode.window.showErrorMessage(`‚ùå Verification failed: ${error}`);
            console.error('Verification error:', error);
        }
    });

    // „Ç≥„Éû„É≥„Éâ„Çí„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å´ÁôªÈå≤
    context.subscriptions.push(sendPromptCommand);
    context.subscriptions.push(getCopilotStateCommand);
    context.subscriptions.push(verifyPromptCommand);

    // Êã°ÂºµÊ©üËÉΩ„ÅÆÂàùÊúüÂåñÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏
    vscode.window.showInformationMessage('üöÄ Copilot Automation Extension activated! Use Command Palette to access automation commands.');
}

export function deactivate() {
    console.log('Copilot Automation Extension deactivated');
}
